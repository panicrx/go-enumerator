// Code generated by "go-enumerator"; DO NOT EDIT.

package example

import "fmt"

// String implements fmt.Stringer. If !s.Defined(), then a generated string is returned based on s's value.
func (s StrKind) String() string {
	return string(s)
}

// Bytes returns a byte-level representation of String(). If !s.Defined(), then a generated string is returned based on s's value.
func (s StrKind) Bytes() []byte {
	return []byte(s)
}

// Defined returns true if s holds a defined value.
func (s StrKind) Defined() bool {
	switch s {
	case "Hello", "World":
		return true
	default:
		return false
	}
}

// Scan implements fmt.Scanner. Use fmt.Scan() to parse strings into StrKind values
func (s *StrKind) Scan(scanState fmt.ScanState, verb rune) error {
	token, err := scanState.Token(true, nil)
	if err != nil {
		return err
	}

	switch string(token) {
	case "Hello":
		*s = Hello
	case "World":
		*s = World
	default:
		return fmt.Errorf("unknown StrKind value: %s", token)
	}
	return nil
}

// Next returns the next defined StrKind. If s is not defined, then Next returns the first defined value.
// Next() can be used to loop through all values of an enum.
//
//	s := StrKind("")
//	for {
//		fmt.Println(s)
//		s = s.Next()
//		if s == StrKind("") {
//			break
//		}
//	}
//
// The exact order that values are returned when looping should not be relied upon.
func (s StrKind) Next() StrKind {
	switch s {
	case Hello:
		return World
	case World:
		return Hello
	default:
		return Hello
	}
}

func _() {
	var x [1]struct{}
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the go-enumerator command to generate them again.

	// Begin "Hello"
	_ = x[byte(0x48)-Hello[0]]
	_ = x[byte(0x65)-Hello[1]]
	_ = x[byte(0x6c)-Hello[2]]
	_ = x[byte(0x6c)-Hello[3]]
	_ = x[byte(0x6f)-Hello[4]]

	// Begin "World"
	_ = x[byte(0x57)-World[0]]
	_ = x[byte(0x6f)-World[1]]
	_ = x[byte(0x72)-World[2]]
	_ = x[byte(0x6c)-World[3]]
	_ = x[byte(0x64)-World[4]]
}

// MarshalJSON implements json.Marshaler
func (s StrKind) MarshalJSON() ([]byte, error) {
	x := s.Bytes()
	y := make([]byte, 0, len(x))
	return append(append(append(y, '"'), x...), '"'), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (s *StrKind) UnmarshalJSON(x []byte) error {
	switch string(x) {
	case "\"Hello\"":
		*s = Hello
		return nil
	case "\"World\"":
		*s = World
		return nil
	default:
		return fmt.Errorf("failed to parse value %v into %T", x, *s)
	}
}
